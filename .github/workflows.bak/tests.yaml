name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests weekly
    - cron: '0 0 * * 0'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ffmpeg || true
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-xdist  # For parallel testing
    
    - name: Generate test data
      run: |
        python examples/create_test_data.py || echo "Test data generation failed (sample trajectory needed)"
    
    - name: Run tests (fast)
      if: matrix.python-version != '3.10' || matrix.os != 'ubuntu-latest'
      run: |
        pytest tests/ -v -m "not slow" --tb=short
    
    - name: Run all tests with coverage (main test)
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
      run: |
        pytest tests/ -v --cov=membrane_analysis --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy
        pip install -e .
    
    - name: Check code formatting with black
      run: |
        black --check membrane_analysis/ tests/
    
    - name: Lint with flake8
      run: |
        flake8 membrane_analysis/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 membrane_analysis/ --count --exit-zero --max-complexity=15 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy membrane_analysis/ --ignore-missing-imports || true

  test-notebooks:
    name: Test example notebooks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install nbconvert jupyter
    
    - name: Test notebooks
      run: |
        # Convert notebooks to scripts and test
        if [ -d "examples" ]; then
          for notebook in examples/*.ipynb; do
            if [ -f "$notebook" ]; then
              jupyter nbconvert --to script "$notebook"
              # Don't actually run them in CI, just check conversion
            fi
          done
        fi

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        pip install twine
        twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/